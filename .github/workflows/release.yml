name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Web version deployed at https://alleey.github.io/flutter-guesstheword/#/
        draft: true
        prerelease: false

  build-web-android:
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Read meta data
      id: metadata
      uses: actions/github-script@v6
      env:
        LINK_DONATE: ${{ secrets.LINK_DONATE }}
        LINK_FEEDBACK: ${{ secrets.LINK_FEEDBACK }}
      with:
        script: |
          const { execSync } = require('child_process');
          let latestTag;
          try {
            latestTag = execSync('git describe --abbrev=0 --tags').toString().trim();
          } catch (error) {
            console.log('No tags found, using default version 0.0.1');
            latestTag = 'v0.0.1';
          }
          const version = latestTag.startsWith('v') ? latestTag.substring(1) : latestTag;
          const { LINK_DONATE, LINK_FEEDBACK } = process.env
          console.log(`Tag:${latestTag} -> Version:${version}`);
          core.setOutput('value', version)
          core.setOutput('link_donate', LINK_DONATE)
          core.setOutput('link_feedback', LINK_FEEDBACK)

    - name: Write metadata to file
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const version = '${{ steps.metadata.outputs.value }}';
          const link_donate = '${{ steps.metadata.outputs.link_donate }}';
          const link_feedback = '${{ steps.metadata.outputs.link_feedback }}';
          fs.writeFileSync('assets/metadata.json', JSON.stringify({ version, link_donate, link_feedback }));
          console.log(`${version} written to assets/metadata.json`);

    - name: Decode and save keystore
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/keystore.jks

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Build
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version-file: pubspec.yaml
        architecture: x64
    - run: flutter pub get
    - run: flutter build web --base-href /flutter-guesstheword/ --build-name=${{ steps.extract_version.outputs.value }} --build-number=${{ github.run_number }}
    - run: flutter build appbundle --release --build-name=${{ steps.extract_version.outputs.value }} --build-number=${{ github.run_number }} --dart-define=MIN_SDK_VERSION=24
    # - run: flutter build apk --release --build-name=${{ steps.extract_version.outputs.value }} --build-number=${{ github.run_number }} --dart-define=MIN_SDK_VERSION=24

    # - name: Sign APK
    #   run: |
    #     zip -d build/app/outputs/flutter-apk/app-release.apk META-INF/\*
    #     jarsigner -verbose -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore android/app/keystore.jks \
    #       -storepass $KEYSTORE_PASSWORD -keypass $KEY_PASSWORD \
    #       build/app/outputs/flutter-apk/app-release.apk $KEY_ALIAS

    - name: Sign AppBundle
      run: |
        zip -d build/app/outputs/bundle/release/app-release.aab META-INF/\*
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore android/app/keystore.jks \
          -storepass $KEYSTORE_PASSWORD -keypass $KEY_PASSWORD \
          build/app/outputs/bundle/release/app-release.aab $KEY_ALIAS

    - name: Deploy Web
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: build/web

    - name: Archive Web Release
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: guesstheword-${{ github.ref_name }}-web.zip
        directory: build/web

    - name: Attach Web Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: build/web/guesstheword-${{ github.ref_name }}-web.zip
        asset_name: guesstheword-${{ github.ref_name }}-web.zip
        asset_content_type: application/zip

    # - name: Attach APK
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ needs.setup.outputs.upload_url }}
    #     asset_path: build/app/outputs/flutter-apk/app-release.apk
    #     asset_name: guesstheword-${{ github.ref_name }}.apk
    #     asset_content_type: application/zip

    - name: Attach AppBundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: build/app/outputs/bundle/release/app-release.aab
        asset_name: guesstheword-${{ github.ref_name }}.aab
        asset_content_type: application/zip

  build-linux:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Install flutter dependencies
      run: sudo apt-get install -y -f clang cmake ninja-build libgtk-3-dev

    - name: Install app dependencies
      run: sudo apt-get install -y -f libunwind-dev libgstreamer1.0-dev libgstreamer-plugins-bad1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev

    - name: Read meta data
      id: metadata
      uses: actions/github-script@v6
      env:
        LINK_DONATE: ${{ secrets.LINK_DONATE }}
        LINK_FEEDBACK: ${{ secrets.LINK_FEEDBACK }}
      with:
        script: |
          const { execSync } = require('child_process');
          let latestTag;
          try {
            latestTag = execSync('git describe --abbrev=0 --tags').toString().trim();
          } catch (error) {
            console.log('No tags found, using default version 0.0.1');
            latestTag = 'v0.0.1';
          }
          const version = latestTag.startsWith('v') ? latestTag.substring(1) : latestTag;
          const { LINK_DONATE, LINK_FEEDBACK } = process.env
          console.log(`Tag:${latestTag} -> Version:${version}`);
          core.setOutput('value', version)
          core.setOutput('link_donate', LINK_DONATE)
          core.setOutput('link_feedback', LINK_FEEDBACK)

    - name: Write metadata to file
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const version = '${{ steps.metadata.outputs.value }}';
          const link_donate = '${{ steps.metadata.outputs.link_donate }}';
          const link_feedback = '${{ steps.metadata.outputs.link_feedback }}';
          fs.writeFileSync('assets/metadata.json', JSON.stringify({ version, link_donate, link_feedback }));
          console.log(`${version} written to assets/metadata.json`);

    - name: Build
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version-file: pubspec.yaml
        architecture: x64
    - run: flutter pub get
    - run: flutter config --enable-linux-desktop
    - run: flutter build linux --release --build-name=${{ steps.extract_version.outputs.value }} --build-number=${{ github.run_number }}

    - name: Archive Linux Release
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: guesstheword-${{ github.ref_name }}-linux.zip
        directory: build/linux/x64/release/bundle

    - name: Attach Linux Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: build/linux/x64/release/bundle/guesstheword-${{ github.ref_name }}-linux.zip
        asset_name: guesstheword-${{ github.ref_name }}-linux.zip
        asset_content_type: application/zip

  build-windows:
    runs-on: windows-latest
    needs: [setup]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Read meta data
      id: metadata
      uses: actions/github-script@v6
      env:
        LINK_DONATE: ${{ secrets.LINK_DONATE }}
        LINK_FEEDBACK: ${{ secrets.LINK_FEEDBACK }}
      with:
        script: |
          const { execSync } = require('child_process');
          let latestTag;
          try {
            latestTag = execSync('git describe --abbrev=0 --tags').toString().trim();
          } catch (error) {
            console.log('No tags found, using default version 0.0.1');
            latestTag = 'v0.0.1';
          }
          const version = latestTag.startsWith('v') ? latestTag.substring(1) : latestTag;
          const { LINK_DONATE, LINK_FEEDBACK } = process.env
          console.log(`Tag:${latestTag} -> Version:${version}`);
          core.setOutput('value', version)
          core.setOutput('link_donate', LINK_DONATE)
          core.setOutput('link_feedback', LINK_FEEDBACK)

    - name: Write metadata to file
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const version = '${{ steps.metadata.outputs.value }}';
          const link_donate = '${{ steps.metadata.outputs.link_donate }}';
          const link_feedback = '${{ steps.metadata.outputs.link_feedback }}';
          fs.writeFileSync('assets/metadata.json', JSON.stringify({ version, link_donate, link_feedback }));
          console.log(`${version} written to assets/metadata.json`);

    - name: Build
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version: '3.22.0'
        architecture: x64
    - run: flutter pub get
    - run: flutter config --enable-windows-desktop
    - run: flutter build windows --release --build-name=${{ steps.extract_version.outputs.value }} --build-number=${{ github.run_number }}

    - name: Archive Windows Release
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: guesstheword-${{ github.ref_name }}-windows.zip
        directory: build/windows/x64/runner/Release

    - name: Attach Windows Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: build/windows/x64/runner/Release/guesstheword-${{ github.ref_name }}-windows.zip
        asset_name: guesstheword-${{ github.ref_name }}-windows.zip
        asset_content_type: application/zip

  build-macos:
    runs-on: macos-latest
    needs: [setup]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Read meta data
      id: metadata
      uses: actions/github-script@v6
      env:
        LINK_DONATE: ${{ secrets.LINK_DONATE }}
        LINK_FEEDBACK: ${{ secrets.LINK_FEEDBACK }}
      with:
        script: |
          const { execSync } = require('child_process');
          let latestTag;
          try {
            latestTag = execSync('git describe --abbrev=0 --tags').toString().trim();
          } catch (error) {
            console.log('No tags found, using default version 0.0.1');
            latestTag = 'v0.0.1';
          }
          const version = latestTag.startsWith('v') ? latestTag.substring(1) : latestTag;
          const { LINK_DONATE, LINK_FEEDBACK } = process.env
          console.log(`Tag:${latestTag} -> Version:${version}`);
          core.setOutput('value', version)
          core.setOutput('link_donate', LINK_DONATE)
          core.setOutput('link_feedback', LINK_FEEDBACK)

    - name: Write metadata to file
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const version = '${{ steps.metadata.outputs.value }}';
          const link_donate = '${{ steps.metadata.outputs.link_donate }}';
          const link_feedback = '${{ steps.metadata.outputs.link_feedback }}';
          fs.writeFileSync('assets/metadata.json', JSON.stringify({ version, link_donate, link_feedback }));
          console.log(`${version} written to assets/metadata.json`);

    - name: Build
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version-file: pubspec.yaml
        architecture: x64
    - run: flutter pub get
    - run: flutter config --enable-macos-desktop
    - run: flutter build macos --release --build-name=${{ steps.extract_version.outputs.value }} --build-number=${{ github.run_number }}

    - name: Archive Macos Release
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: guesstheword-${{ github.ref_name }}-macos.zip
        directory: build/macos/Build/Products/Release

    - name: Attach Macos Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: build/macos/Build/Products/Release/guesstheword-${{ github.ref_name }}-macos.zip
        asset_name: guesstheword-${{ github.ref_name }}-macos.zip
        asset_content_type: application/zip
